generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model classes {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  description          String
  age_group_min        Int
  age_group_max        Int
  capacity             Int
  school_id            String     @db.Uuid
  main_teacher_id      String     @db.Uuid
  secondary_teacher_id String     @db.Uuid
  is_active            Boolean    @default(true)
  created_at           DateTime   @default(now()) @db.Timestamptz(6)
  updated_at           DateTime   @default(now()) @db.Timestamptz(6)
  img_url              String?
  schools              schools    @relation(fields: [school_id], references: [id])
  students             students[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schools {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  address     String
  phone       String     @unique
  email       String     @unique
  website     String?
  description String?
  is_active   Boolean    @default(true)
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  updated_at  DateTime   @default(now()) @db.Timestamptz(6)
  classes     classes[]
  students    students[]
  users       users[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model student_parents {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id         String   @db.Uuid
  parent_id          String   @db.Uuid
  relationship       String
  is_primary_contact Boolean  @default(false)
  can_pickup         Boolean  @default(true)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  users              users    @relation(fields: [parent_id], references: [id])
  students           students @relation(fields: [student_id], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model students {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String
  last_name       String
  birth_date      DateTime          @db.Date
  gender          String?
  blood_type      String?
  allergies       String?
  medical_notes   String?
  photo_url       String?
  class_id        String            @db.Uuid
  school_id       String            @db.Uuid
  is_active       Boolean           @default(true)
  enrollment_date DateTime          @default(now()) @db.Timestamptz(6)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  student_parents student_parents[]
  classes         classes           @relation(fields: [class_id], references: [id])
  schools         schools           @relation(fields: [school_id], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  password_hash   String
  first_name      String
  last_name       String
  phone           String?
  avatar_url      String?
  role_id         String            @db.Uuid
  school_id       String            @db.Uuid
  is_active       Boolean           @default(true)
  last_login      DateTime?         @db.Timestamptz(6)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  student_parents student_parents[]
  schools         schools           @relation(fields: [school_id], references: [id])
}
